$date
    Mon Dec  6 16:15:03 2021
$end
$version
    MyHDL 0.11
$end
$timescale
    1ns
$end

$scope module SimulateCore $end
$var reg 32 ! pc4_out $end
$var reg 32 " pc_in $end
$var reg 1 # branchOut $end
$var reg 1 $ RegWriteOut $end
$var reg 1 % LoadOut $end
$var reg 1 & StoreOut $end
$var reg 1 ' UtypeOut $end
$var reg 1 ( AuipcOut $end
$var reg 1 ) JalOut $end
$var reg 1 * JalrOut $end
$var reg 32 + sb_imm $end
$var reg 32 , aluControlpin $end
$var reg 1 - ALUbranchOut $end
$var reg 5 . ALUOP $end
$var reg 32 / DMdataOut $end
$var reg 1 0 ImmediateOut $end
$var reg 32 1 bus_A $end
$var reg 32 2 bus_B $end
$var reg 1 3 clk $end
$var reg 32 4 i_imm $end
$var reg 32 5 instructionOut $end
$var reg 32 6 operandA $end
$var reg 32 7 operandB $end
$var reg 32 8 pc_out $end
$var reg 5 9 rd $end
$var reg 1 : reset_n $end
$var reg 32 ; result $end
$var reg 32 < s_imm $end
$var reg 32 = u_imm $end
$var reg 32 > uj_imm $end
$var reg 32 ? writeBack $end
$scope module CUsignals $end
$var reg 1 @ CUsignals(0) $end
$var reg 1 A CUsignals(1) $end
$var reg 1 B CUsignals(2) $end
$var reg 1 C CUsignals(3) $end
$var reg 1 D CUsignals(4) $end
$var reg 1 E CUsignals(5) $end
$var reg 1 F CUsignals(6) $end
$var reg 1 G CUsignals(7) $end
$var reg 1 H CUsignals(8) $end
$upscope $end
$scope module Core0 $end
$var reg 1 : reset_n $end
$var reg 5 . ALUOP $end
$var reg 1 - ALUbranchOut $end
$var reg 1 ( AuipcOut $end
$var reg 32 / DMdataOut $end
$var reg 1 0 ImmediateOut $end
$var reg 1 ) JalOut $end
$var reg 1 * JalrOut $end
$var reg 1 % LoadOut $end
$var reg 1 $ RegWriteOut $end
$var reg 1 & StoreOut $end
$var reg 1 ' UtypeOut $end
$var reg 32 , aluControlpin $end
$var reg 1 # branchOut $end
$var reg 32 1 bus_A $end
$var reg 32 2 bus_B $end
$var reg 1 3 clk $end
$var reg 32 4 i_imm $end
$var reg 32 5 instructionOut $end
$var reg 32 6 operandA $end
$var reg 32 7 operandB $end
$var reg 32 ! pc4_out $end
$var reg 32 " pc_in $end
$var reg 32 8 pc_out $end
$var reg 5 9 rd $end
$var reg 32 ; result $end
$var reg 32 < s_imm $end
$var reg 32 + sb_imm $end
$var reg 32 = u_imm $end
$var reg 32 > uj_imm $end
$var reg 32 ? writeBack $end
$scope module CUsignals $end
$var reg 1 @ CUsignals(0) $end
$var reg 1 A CUsignals(1) $end
$var reg 1 B CUsignals(2) $end
$var reg 1 C CUsignals(3) $end
$var reg 1 D CUsignals(4) $end
$var reg 1 E CUsignals(5) $end
$var reg 1 F CUsignals(6) $end
$var reg 1 G CUsignals(7) $end
$var reg 1 H CUsignals(8) $end
$upscope $end
$upscope $end
$upscope $end

$enddefinitions $end
$dumpvars
b00000000000000000000000000000000 !
b00000000000000000000000000000000 "
b0 #
b0 $
b0 %
b0 &
b0 '
b0 (
b0 )
b0 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b0 -
b00000 .
b00000000000000000000000000000000 /
b0 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
13
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000 9
0:
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b0 @
b0 A
b0 B
b0 C
b0 D
b0 E
b0 F
b0 G
b0 H
$end
03
#10
1:
13
#20
03
#30
13
#40
03
#50
13
#60
03
#70
13
#80
03
#90
13
#100
03
#110
13
#120
03
#130
13
#140
03
#150
13
#160
