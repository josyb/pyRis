// File: ALU.v
// Generated by MyHDL 0.11
// Date: Sat Dec  4 00:36:07 2021


`timescale 1ns/10ps

module ALU (
    operandA,
    operandB,
    aluControl,
    branchStatus,
    Result
);


input [31:0] operandA;
input [31:0] operandB;
input [4:0] aluControl;
output [0:0] branchStatus;
reg [0:0] branchStatus;
output [31:0] Result;
reg [31:0] Result;




always @(operandA, operandB, aluControl) begin: ALU_ALU
    if ((aluControl == 0)) begin
        Result = (operandA + operandB);
    end
    else if ((aluControl == 8)) begin
        Result = (operandA - operandB);
    end
    else if ((aluControl == 1)) begin
        Result = (operandA << operandB);
    end
    else if (((aluControl == 2) || (aluControl == 3))) begin
        Result = ($signed(operandA) < $signed(operandB)) ? 1 : 0;
    end
    else if ((aluControl == 4)) begin
        Result = (operandA ^ operandB);
    end
    else if (((aluControl == 5) || (aluControl == 13))) begin
        Result = (operandA >>> operandB[5-1:0]);
    end
    else if ((aluControl == 6)) begin
        Result = (operandA | operandB);
    end
    else if ((aluControl == 7)) begin
        Result = (operandA & operandB);
    end
    else if ((aluControl == 16)) begin
        Result = (operandA == operandB) ? 1 : 0;
    end
    else if ((aluControl == 17)) begin
        Result = (operandA != operandB) ? 1 : 0;
    end
    else if (((aluControl == 20) || (aluControl == 22))) begin
        Result = (operandA < operandB) ? 1 : 0;
    end
    else if (((aluControl == 21) || (aluControl == 23))) begin
        Result = (operandA >= operandB) ? 1 : 0;
    end
    if (((aluControl[4] == 1) && (aluControl[3] == 0))) begin
        branchStatus = 1;
    end
end

endmodule
